//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Services.Educations;
using Common.Paginations.Models;
using Common;
using DataTransferObjects.Educations;
using HirefyAI.Domain.Entities;

namespace Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EducationsController : ControllerBase
    {
        private readonly IEducationsService _educationsService;
        public EducationsController(IEducationsService educationsService)
        {
            _educationsService = educationsService;
        }

        [HttpPost]
        public async Task<Result<EducationViewModel>> AddAsync(EducationCreationDto educationCreationDto)
        {
            return Result<EducationViewModel>.Success(await _educationsService.AddAsync(educationCreationDto));
        }

        [HttpGet]
        public async Task<Result<List<EducationViewModel>>> GetAllAsync()
        {
            return Result<List<EducationViewModel>>.Success(await _educationsService.GetAllAsync());
        }

        [HttpPost("filter")]
        public async Task<Result<ListResult<EducationViewModel>>> FilterAsync(PaginationOptions filter)
        {
            return Result<ListResult<EducationViewModel>>.Success(await _educationsService.FilterAsync(filter));
        }

        [HttpGet("{id}")]
        public async Task<Result<EducationViewModel>> GetByIdAsync(long id)
        {
            return Result<EducationViewModel>.Success(await _educationsService.GetByIdAsync(id));
        }

        [HttpPut("{id}")]
        public async Task<Result<EducationViewModel>> UpdateAsync(long id, EducationModificationDto educationModificationDto)
        {
            return Result<EducationViewModel>.Success(await _educationsService.UpdateAsync(id, educationModificationDto));
        }

        [HttpDelete("{id}")]
        public async Task<Result<EducationViewModel>> DeleteAsync(long id)
        {
            return Result<EducationViewModel>.Success(await _educationsService.DeleteAsync(id));
        }
    }
}