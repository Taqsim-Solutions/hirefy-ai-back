//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Common.Paginations.Models;
using Common.Paginations.Extensions;
using Common.ServiceAttribute;
using Common;
using DataTransferObjects.Educations;
using HirefyAI.Infrastructure;
using HirefyAI.Domain.Entities;

namespace Services.Educations
{
    [ScopedService]
    public class EducationsService : IEducationsService
    {
        private readonly HirefyAIDb _hirefyAIDb;
        private readonly IMapper _mapper;
        public EducationsService(HirefyAIDb hirefyAIDb, IMapper mapper)
        {
            _hirefyAIDb = hirefyAIDb;
            _mapper = mapper;
        }

        public async Task<EducationViewModel> AddAsync(EducationCreationDto educationCreationDto)
        {
            var entity = _mapper.Map<Education>(educationCreationDto);
            var entry = await _hirefyAIDb.Set<Education>().AddAsync(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<EducationViewModel>(entry.Entity);
        }

        public async Task<List<EducationViewModel>> GetAllAsync()
        {
            var entities = await _hirefyAIDb.Set<Education>().ToListAsync();
            return _mapper.Map<List<EducationViewModel>>(entities);
        }

        public async Task<ListResult<EducationViewModel>> FilterAsync(PaginationOptions filter)
        {
            var paginatedResult = await _hirefyAIDb.Set<Education>().ApplyPaginationAsync(filter);
            var Educations = _mapper.Map<List<EducationViewModel>>(paginatedResult.paginatedList);
            return new ListResult<EducationViewModel>(paginatedResult.paginationMetadata, Educations);
        }

        public async Task<EducationViewModel> GetByIdAsync(long id)
        {
            var entity = await _hirefyAIDb.Set<Education>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Education with Id {id} not found.");
            return _mapper.Map<EducationViewModel>(entity);
        }

        public async Task<EducationViewModel> UpdateAsync(long id, EducationModificationDto educationModificationDto)
        {
            var entity = await _hirefyAIDb.Set<Education>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Education with {id} not found.");
            _mapper.Map(educationModificationDto, entity);
            var entry = _hirefyAIDb.Set<Education>().Update(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<EducationViewModel>(entry.Entity);
        }

        public async Task<EducationViewModel> DeleteAsync(long id)
        {
            var entity = await _hirefyAIDb.Set<Education>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Education with {id} not found.");
            var entry = _hirefyAIDb.Set<Education>().Remove(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<EducationViewModel>(entry.Entity);
        }
    }

    /// <summary>
    /// AutoMapper mapping profile for Education entity.
    /// </summary>
    public class EducationMappingProfile : Profile
    {
        public EducationMappingProfile()
        {
            CreateMap<Education, EducationViewModel>();
            CreateMap<EducationCreationDto, Education>();
            CreateMap<EducationModificationDto, Education>();
        }
    }
}