//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Common.Paginations.Models;
using Common.Paginations.Extensions;
using Common.ServiceAttribute;
using Common;
using DataTransferObjects.Resumes;
using HirefyAI.Infrastructure;
using HirefyAI.Domain.Entities;
using HirefyAI.Application.Helpers;
using HirefyAI.Application.DataTransferObjects.Resumes;

namespace Services.Resumes
{
    [ScopedService]
    public class ResumesService : IResumesService
    {
        private readonly HirefyAIDb _hirefyAIDb;
        private readonly IMapper _mapper;
        private readonly UserHelper _userHelper;
        public ResumesService(HirefyAIDb hirefyAIDb, IMapper mapper, UserHelper userHelper)
        {
            _hirefyAIDb = hirefyAIDb;
            _mapper = mapper;
            _userHelper = userHelper;
        }

        public async Task<ResumeViewModel> AddAsync(ResumeCreationDto resumeCreationDto)
        {
            var entity = _mapper.Map<Resume>(resumeCreationDto);
            entity.UserId = _userHelper.UserId;
            var entry = await _hirefyAIDb.Set<Resume>().AddAsync(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<ResumeViewModel>(entry.Entity);
        }

        public async Task<List<ResumeViewModel>> GetAllAsync()
        {
            var entities = await _hirefyAIDb.Set<Resume>()
                .Where(x => x.UserId == _userHelper.UserId)
                .ToListAsync();
            return _mapper.Map<List<ResumeViewModel>>(entities);
        }

        public async Task<ListResult<ResumeViewModel>> FilterAsync(PaginationOptions filter)
        {
            var paginatedResult = await _hirefyAIDb.Set<Resume>()
                .Where(x => x.UserId == _userHelper.UserId)
                .ApplyPaginationAsync(filter);
            var Resumes = _mapper.Map<List<ResumeViewModel>>(paginatedResult.paginatedList);
            return new ListResult<ResumeViewModel>(paginatedResult.paginationMetadata, Resumes);
        }

        public async Task<ResumeDetailedViewModel> GetByIdAsync(int id)
        {
            var entity = await _hirefyAIDb.Set<Resume>()
                .Include(x => x.Educations)
                .Include(x => x.Experiences)
                .Include(x => x.Skills)
                .Include(x => x.Template)
                .FirstOrDefaultAsync(x => x.Id == id && x.UserId == _userHelper.UserId);
            if (entity == null)
                throw new InvalidOperationException($"Resume with Id {id} not found.");
            return _mapper.Map<ResumeDetailedViewModel>(entity);
        }

        public async Task<ResumeViewModel> UpdateAsync(int id, ResumeModificationDto resumeModificationDto)
        {
            var entity = await _hirefyAIDb.Set<Resume>()
                .FirstOrDefaultAsync(x => x.Id == id && x.UserId == _userHelper.UserId);
            if (entity == null)
                throw new InvalidOperationException($"Resume with {id} not found.");
            _mapper.Map(resumeModificationDto, entity);
            var entry = _hirefyAIDb.Set<Resume>().Update(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<ResumeViewModel>(entry.Entity);
        }

        public async Task<ResumeViewModel> DeleteAsync(int id)
        {
            var entity = await _hirefyAIDb.Set<Resume>()
                .FirstOrDefaultAsync(x => x.Id == id && x.UserId == _userHelper.UserId);
            if (entity == null)
                throw new InvalidOperationException($"Resume with {id} not found.");
            var entry = _hirefyAIDb.Set<Resume>().Remove(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<ResumeViewModel>(entry.Entity);
        }
    }

    /// <summary>
    /// AutoMapper mapping profile for Resume entity.
    /// </summary>
    public class ResumeMappingProfile : Profile
    {
        public ResumeMappingProfile()
        {
            CreateMap<Resume, ResumeViewModel>();
            CreateMap<Resume, ResumeDetailedViewModel>();
            CreateMap<ResumeCreationDto, Resume>();
            CreateMap<ResumeModificationDto, Resume>();
        }
    }
}