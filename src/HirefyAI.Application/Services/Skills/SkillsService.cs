//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Common.Paginations.Models;
using Common.Paginations.Extensions;
using Common.ServiceAttribute;
using Common;
using DataTransferObjects.Skills;
using HirefyAI.Infrastructure;
using HirefyAI.Domain.Entities;

namespace Services.Skills
{
    [ScopedService]
    public class SkillsService : ISkillsService
    {
        private readonly HirefyAIDb _hirefyAIDb;
        private readonly IMapper _mapper;
        public SkillsService(HirefyAIDb hirefyAIDb, IMapper mapper)
        {
            _hirefyAIDb = hirefyAIDb;
            _mapper = mapper;
        }

        public async Task<SkillViewModel> AddAsync(SkillCreationDto skillCreationDto)
        {
            var entity = _mapper.Map<Skill>(skillCreationDto);
            var entry = await _hirefyAIDb.Set<Skill>().AddAsync(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<SkillViewModel>(entry.Entity);
        }

        public async Task<List<SkillViewModel>> GetAllAsync()
        {
            var entities = await _hirefyAIDb.Set<Skill>().ToListAsync();
            return _mapper.Map<List<SkillViewModel>>(entities);
        }

        public async Task<ListResult<SkillViewModel>> FilterAsync(PaginationOptions filter)
        {
            var paginatedResult = await _hirefyAIDb.Set<Skill>().ApplyPaginationAsync(filter);
            var Skills = _mapper.Map<List<SkillViewModel>>(paginatedResult.paginatedList);
            return new ListResult<SkillViewModel>(paginatedResult.paginationMetadata, Skills);
        }

        public async Task<SkillViewModel> GetByIdAsync(int id)
        {
            var entity = await _hirefyAIDb.Set<Skill>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Skill with Id {id} not found.");
            return _mapper.Map<SkillViewModel>(entity);
        }

        public async Task<SkillViewModel> UpdateAsync(int id, SkillModificationDto skillModificationDto)
        {
            var entity = await _hirefyAIDb.Set<Skill>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Skill with {id} not found.");
            _mapper.Map(skillModificationDto, entity);
            var entry = _hirefyAIDb.Set<Skill>().Update(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<SkillViewModel>(entry.Entity);
        }

        public async Task<SkillViewModel> DeleteAsync(int id)
        {
            var entity = await _hirefyAIDb.Set<Skill>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Skill with {id} not found.");
            var entry = _hirefyAIDb.Set<Skill>().Remove(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<SkillViewModel>(entry.Entity);
        }
    }

    /// <summary>
    /// AutoMapper mapping profile for Skill entity.
    /// </summary>
    public class SkillMappingProfile : Profile
    {
        public SkillMappingProfile()
        {
            CreateMap<Skill, SkillViewModel>();
            CreateMap<SkillCreationDto, Skill>();
            CreateMap<SkillModificationDto, Skill>();
        }
    }
}