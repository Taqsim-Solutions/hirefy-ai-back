//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Common.Paginations.Models;
using Common.Paginations.Extensions;
using Common.ServiceAttribute;
using Common;
using DataTransferObjects.Experiences;
using HirefyAI.Infrastructure;
using HirefyAI.Domain.Entities;
using HirefyAI.Application.Helpers;

namespace Services.Experiences
{
    [ScopedService]
    public class ExperiencesService : IExperiencesService
    {
        private readonly HirefyAIDb _hirefyAIDb;
        private readonly IMapper _mapper;
        private readonly UserHelper _userHelper;
        public ExperiencesService(HirefyAIDb hirefyAIDb, IMapper mapper, UserHelper userHelper)
        {
            _hirefyAIDb = hirefyAIDb;
            _mapper = mapper;
            _userHelper = userHelper;
        }

        public async Task<ExperienceViewModel> AddAsync(ExperienceCreationDto experienceCreationDto)
        {
            var entity = _mapper.Map<Experience>(experienceCreationDto);
            entity.UserId = _userHelper.UserId;
            var entry = await _hirefyAIDb.Set<Experience>().AddAsync(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<ExperienceViewModel>(entry.Entity);
        }

        public async Task<List<ExperienceViewModel>> GetAllAsync()
        {
            var entities = await _hirefyAIDb.Set<Experience>()
                .Where(x => x.UserId == _userHelper.UserId)
                .ToListAsync();
            return _mapper.Map<List<ExperienceViewModel>>(entities);
        }

        public async Task<ListResult<ExperienceViewModel>> FilterAsync(PaginationOptions filter)
        {
            var paginatedResult = await _hirefyAIDb.Set<Experience>()
                .Where(x => x.UserId == _userHelper.UserId)
                .ApplyPaginationAsync(filter);
            var Experiences = _mapper.Map<List<ExperienceViewModel>>(paginatedResult.paginatedList);
            return new ListResult<ExperienceViewModel>(paginatedResult.paginationMetadata, Experiences);
        }

        public async Task<ExperienceViewModel> GetByIdAsync(int id)
        {
            var entity = await _hirefyAIDb.Set<Experience>()
                .FirstOrDefaultAsync(x => x.Id == id && x.UserId == _userHelper.UserId);
            if (entity == null)
                throw new InvalidOperationException($"Experience with Id {id} not found.");
            return _mapper.Map<ExperienceViewModel>(entity);
        }

        public async Task<ExperienceViewModel> UpdateAsync(int id, ExperienceModificationDto experienceModificationDto)
        {
            var entity = await _hirefyAIDb.Set<Experience>()
                .FirstOrDefaultAsync(x => x.Id == id && x.UserId == _userHelper.UserId);
            if (entity == null)
                throw new InvalidOperationException($"Experience with {id} not found.");
            _mapper.Map(experienceModificationDto, entity);
            var entry = _hirefyAIDb.Set<Experience>().Update(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<ExperienceViewModel>(entry.Entity);
        }

        public async Task<ExperienceViewModel> DeleteAsync(int id)
        {
            var entity = await _hirefyAIDb.Set<Experience>()
                .FirstOrDefaultAsync(x => x.Id == id && x.UserId == _userHelper.UserId);
            if (entity == null)
                throw new InvalidOperationException($"Experience with {id} not found.");
            var entry = _hirefyAIDb.Set<Experience>().Remove(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<ExperienceViewModel>(entry.Entity);
        }
    }

    /// <summary>
    /// AutoMapper mapping profile for Experience entity.
    /// </summary>
    public class ExperienceMappingProfile : Profile
    {
        public ExperienceMappingProfile()
        {
            CreateMap<Experience, ExperienceViewModel>();
            CreateMap<ExperienceCreationDto, Experience>();
            CreateMap<ExperienceModificationDto, Experience>();
        }
    }
}