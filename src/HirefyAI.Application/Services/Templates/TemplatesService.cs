//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Common.Paginations.Models;
using Common.Paginations.Extensions;
using Common.ServiceAttribute;
using Common;
using DataTransferObjects.Templates;
using HirefyAI.Infrastructure;
using HirefyAI.Domain.Entities;
using HirefyAI.Application.Helpers;

namespace Services.Templates
{
    [ScopedService]
    public class TemplatesService : ITemplatesService
    {
        private readonly HirefyAIDb _hirefyAIDb;
        private readonly IMapper _mapper;
        private readonly UserHelper _userHelper;
        public TemplatesService(HirefyAIDb hirefyAIDb, IMapper mapper, UserHelper userHelper)
        {
            _hirefyAIDb = hirefyAIDb;
            _mapper = mapper;
            _userHelper = userHelper;
        }

        public async Task<TemplateViewModel> AddAsync(TemplateCreationDto templateCreationDto)
        {
            var entity = _mapper.Map<Template>(templateCreationDto);
            var entry = await _hirefyAIDb.Set<Template>().AddAsync(entity);
            entity.UserId = _userHelper.UserId; 
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<TemplateViewModel>(entry.Entity);
        }

        public async Task<List<TemplateViewModel>> GetAllAsync()
        {
            var entities = await _hirefyAIDb.Set<Template>().ToListAsync();
            return _mapper.Map<List<TemplateViewModel>>(entities);
        }

        public async Task<ListResult<TemplateViewModel>> FilterAsync(PaginationOptions filter)
        {
            var paginatedResult = await _hirefyAIDb.Set<Template>().ApplyPaginationAsync(filter);
            var Templates = _mapper.Map<List<TemplateViewModel>>(paginatedResult.paginatedList);
            return new ListResult<TemplateViewModel>(paginatedResult.paginationMetadata, Templates);
        }

        public async Task<TemplateViewModel> GetByIdAsync(int id)
        {
            var entity = await _hirefyAIDb.Set<Template>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Template with Id {id} not found.");
            return _mapper.Map<TemplateViewModel>(entity);
        }

        public async Task<TemplateViewModel> UpdateAsync(int id, TemplateModificationDto templateModificationDto)
        {
            var entity = await _hirefyAIDb.Set<Template>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Template with {id} not found.");
            _mapper.Map(templateModificationDto, entity);
            var entry = _hirefyAIDb.Set<Template>().Update(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<TemplateViewModel>(entry.Entity);
        }

        public async Task<TemplateViewModel> DeleteAsync(int id)
        {
            var entity = await _hirefyAIDb.Set<Template>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Template with {id} not found.");
            var entry = _hirefyAIDb.Set<Template>().Remove(entity);
            await _hirefyAIDb.SaveChangesAsync();
            return _mapper.Map<TemplateViewModel>(entry.Entity);
        }
    }

    /// <summary>
    /// AutoMapper mapping profile for Template entity.
    /// </summary>
    public class TemplateMappingProfile : Profile
    {
        public TemplateMappingProfile()
        {
            CreateMap<Template, TemplateViewModel>();
            CreateMap<TemplateCreationDto, Template>();
            CreateMap<TemplateModificationDto, Template>();
        }
    }
}